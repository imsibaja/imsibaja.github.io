[
  {
    "objectID": "delete-later/practice.html",
    "href": "delete-later/practice.html",
    "title": "Here is my level one header",
    "section": "",
    "text": "Here is my level one header\nHere is my first paragraph\nHere is my second paragraph, where you can read more about MEDS.\nThis is very important text!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "some text goes here"
  },
  {
    "objectID": "about.html#what-i-do-for-work",
    "href": "about.html#what-i-do-for-work",
    "title": "About",
    "section": "",
    "text": "some text goes here"
  },
  {
    "objectID": "about.html#what-i-do-for-fun",
    "href": "about.html#what-i-do-for-fun",
    "title": "About",
    "section": "What I do for fun",
    "text": "What I do for fun\n\nfun stuff\n\nHere is some more text\n\nHere is a line\nHere is another line"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ian Morris-Sibaja",
    "section": "",
    "text": "Drawing on his research and fieldwork experiences, Ian is now pursuing a Master of Environmental Data Science from the UCSB Bren School. His ultimate goal is to utilize his analytical toolkit to develop data-driven solutions that measure and mediate human impacts on the natural environments of Southern California."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "The Environmental Effects of the 2017 Thomas Fire\n\n\n\n\n\n\nIan Morris-Sibaja\n\n\nDec 5, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHello World!\n\n\n\nQuarto\n\n\nMEDS\n\n\n\nMy first blog\n\n\n\nIMS\n\n\nOct 18, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-10-18-hello-world/index.html",
    "href": "posts/2024-10-18-hello-world/index.html",
    "title": "Hello World!",
    "section": "",
    "text": "I’m going to insert a footnote here 1"
  },
  {
    "objectID": "posts/2024-10-18-hello-world/index.html#this-is-my-first-section",
    "href": "posts/2024-10-18-hello-world/index.html#this-is-my-first-section",
    "title": "Hello World!",
    "section": "",
    "text": "I’m going to insert a footnote here 1"
  },
  {
    "objectID": "posts/2024-10-18-hello-world/index.html#this-is-my-second",
    "href": "posts/2024-10-18-hello-world/index.html#this-is-my-second",
    "title": "Hello World!",
    "section": "This is my second",
    "text": "This is my second\nHere’s my next paragraph2\nI’m citing Sam Csik (Csik 2022).\nHere is more random text. I’m going to cite a journal article now (Gaynor et al. 2022)."
  },
  {
    "objectID": "posts/2024-10-18-hello-world/index.html#footnotes",
    "href": "posts/2024-10-18-hello-world/index.html#footnotes",
    "title": "Hello World!",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHere is a new footnote↩︎\nHere is my second footnote↩︎"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task1-reflection-MORRIS-SIBAJA.html",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task1-reflection-MORRIS-SIBAJA.html",
    "title": "Task 1: The politics of pixels reading",
    "section": "",
    "text": "When working with satellite data, it’s easy to assume that it is inherently objective and equally accessible to everyone. However, Bennett et al., in their paper The Politics of Pixels: A Review and Agenda for Critical Remote Sensing (2022 [1]), challenge this assumption, arguing that remote sensing needs a critical lens. They emphasize that various sociopolitical factors influence who collects remotely sensed data, how it’s collected, and ultimately, who benefits from its insights. This reading will encourage you to explore the biases and inequalities that can be embedded in remote sensing technologies and practices.\nReflecting on your personal or professional background, how might sociopolitical factors shape the availability and interpretation of satellite and other remotely sensed data for communities or organizations you’re familiar with?\nGrowing up as a family owned citrus rancher, I recognize how sociopolitical factors influence access to remote sensing data, which is vital for monitoring, say, crop health. Corporate farming usually are the only one who benefit from subsidized or proprietary satellite tools, while smaller farmers like ours may lack access to this kind of recurring high-resolution imagery. This leads to those bigger companies being favored over family businesses such as ours, as their technology leads to higher yield crops. Helping smaller farmers with their accessibility to remote sensing may be essential to addressing these disparities within the working class of farmers.\n\n\nM. M. Bennett, J. K. Chen, L. F. Alvarez León, and C. J. Gleason, “The politics of pixels: A review and agenda for critical remote sensing,” Progress in Human Geography, vol. 46, no. 3, pp. 729–752, Jun. 2022, doi: 10.1177/03091325221074691. Available: https://journals.sagepub.com/doi/10.1177/03091325221074691. [Accessed: Nov. 23, 2024]"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task1-reflection-MORRIS-SIBAJA.html#references",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task1-reflection-MORRIS-SIBAJA.html#references",
    "title": "Task 1: The politics of pixels reading",
    "section": "",
    "text": "M. M. Bennett, J. K. Chen, L. F. Alvarez León, and C. J. Gleason, “The politics of pixels: A review and agenda for critical remote sensing,” Progress in Human Geography, vol. 46, no. 3, pp. 729–752, Jun. 2022, doi: 10.1177/03091325221074691. Available: https://journals.sagepub.com/doi/10.1177/03091325221074691. [Accessed: Nov. 23, 2024]"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/hwk4-task2-false-color-MORRIS-SIBAJA.html",
    "href": "posts/2024-12-02-thomas-fire/hwk4-task2-false-color-MORRIS-SIBAJA.html",
    "title": "Thomas Fire (2017) False Color",
    "section": "",
    "text": "Author: Ian Morris-Sibaja\nThis project can be found at https://github.com/imsibaja/eds220-hw4"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/hwk4-task2-false-color-MORRIS-SIBAJA.html#about",
    "href": "posts/2024-12-02-thomas-fire/hwk4-task2-false-color-MORRIS-SIBAJA.html#about",
    "title": "Thomas Fire (2017) False Color",
    "section": "About:",
    "text": "About:\n\nPurpose:\nThis notebook outlines the process of visualizing Landsat multispectral geospatial data to analyze the 2017 Thomas Fire. This fire burned over 280,000 acres in Ventura and Santa Barbara counties, causing significant damage to human’s and their surrounding environment. This analysis emphasizes burn severity and its impacts on vegetation, known as fire scars, shown using false coloring.\n### Highlights:\n\nImport and explore Landsat data to analyze the Thomas Fires\nCreate true and false color images to highlight the fire’s impact\nVisualize the false color fire scar alongside perimeter data for detailed analysis\n\n\n\nAbout the data: Landset 8 Satellite Collection\nThis dataset consists of simplified bands (red, green, blue, near-infrared, and shortwave infrared) from Landsat Collection 2 Level-2 surface reflectance data, which was atmospherically corrected and captured by NASA’s Landsat 8 satellite. It was sourced from the Microsoft Planetary Computer data catalog and preprocessed to exclude non-land areas and reduce spatial resolution for ease of computation.\n\n\nReferences:\nLandsat Data from Microsoft’s Planetary Computer Data Catalogue,\n\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 4-5 Thematic Mapper Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9IAXOVV\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 7 Enhanced Thematic Mapper Plus Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9C7I13B\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 8-9 Operational Land Imager / Thermal Infrared Sensor Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9OGBGM6\n\nGalaz García, Carmen. Assignment4 – EDS 220 - Working with Environmental Datasets. (n.d.). https://meds-eds-220.github.io/MEDS-eds-220-course/assignments/assignment4.html"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/hwk4-task2-false-color-MORRIS-SIBAJA.html#import-libraries",
    "href": "posts/2024-12-02-thomas-fire/hwk4-task2-false-color-MORRIS-SIBAJA.html#import-libraries",
    "title": "Thomas Fire (2017) False Color",
    "section": "Import Libraries",
    "text": "Import Libraries\nFirst, we need to import the necessary packages to perform the analysis.\n\n# Import packages\nimport rioxarray as rioxr\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport os"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/hwk4-task2-false-color-MORRIS-SIBAJA.html#true-color-image",
    "href": "posts/2024-12-02-thomas-fire/hwk4-task2-false-color-MORRIS-SIBAJA.html#true-color-image",
    "title": "Thomas Fire (2017) False Color",
    "section": "True color image",
    "text": "True color image\n\nStep 1: Explore the Data\nWe begin by iporting the data, hosted within this repository.\n\n# Import data\nlandsat_fp = os.path.join(\"data\", \"landsat8-2018-01-26-sb-simplified.nc\")\nlandsat_df = rioxr.open_rasterio(landsat_fp)\n\nthomas_fp = os.path.join(\"data\", \"thomas_2017.geojson\")\nthomas_2017 = gpd.read_file(thomas_fp)\n\nNext, we examine the dataset to understand its structure. After exploring the data, we will summarize in paragraph form.\n\n# Show preliminary xarrary.Dataset\nlandsat_df\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\n\n# Show dimensions of dataset \nprint(landsat_df.dims)\n\nFrozenMappingWarningOnValuesAccess({'band': 1, 'x': 870, 'y': 731})\n\n\n\n# Show CRS of dataset \nprint(landsat_df.rio.crs)\n\nEPSG:32611\n\n\n\n# Show datatypes of dataset \nprint(landsat_df.dtypes)\n\nFrozen({'red': dtype('float64'), 'green': dtype('float64'), 'blue': dtype('float64'), 'nir08': dtype('float64'), 'swir22': dtype('float64')})\n\n\n\nData Summary\nThis dataset is a 2D dataset with a single band. There are five wavelength ranges captures, red, green, blue, near infrared and short wave infrared. The dataset is of CRS EPSG:32611.\n\n\nStep 2: Drop the Band Dimension\nTo ease visualizations, we will simplify the dataset by removing unnecessary dimensions.\n\n# Drop band dimension of data\nlandsat_df = landsat_df.drop_vars(\"band\").squeeze()\n\n\n# View updated dataset\nlandsat_df.head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 1kB\nDimensions:      (x: 5, y: 5)\nCoordinates:\n  * x            (x) float64 40B 1.213e+05 1.216e+05 ... 1.221e+05 1.224e+05\n  * y            (y) float64 40B 3.952e+06 3.952e+06 ... 3.952e+06 3.951e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (y, x) float64 200B ...\n    green        (y, x) float64 200B ...\n    blue         (y, x) float64 200B ...\n    nir08        (y, x) float64 200B ...\n    swir22       (y, x) float64 200B ...xarray.DatasetDimensions:x: 5y: 5Coordinates: (3)x(x)float641.213e+05 1.216e+05 ... 1.224e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., 122115., 122385.])y(y)float643.952e+06 3.952e+06 ... 3.951e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., 3951585., 3951315.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]Indexes: (2)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0], dtype='float64', name='x'))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0], dtype='float64', name='y'))Attributes: (0)\n\n\n\n\n\nSelect RGB Bands\nBy extracting the red, green, and blue bands we can begin to create an RGB image.\n\n# Select rgb variables\nlandsat_df[[\"red\", \"green\", \"blue\"]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 15MB\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (y, x) float64 5MB ...\n    green        (y, x) float64 5MB ...\n    blue         (y, x) float64 5MB ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (3)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (2)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nConverting the dataframe to an array will easily allow us to plot using the plot.imshow() method.\n\n# Convert to array\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (variable: 3, y: 731, x: 870)&gt; Size: 15MB\narray([[[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]])\nCoordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n  * variable     (variable) object 24B 'red' 'green' 'blue'xarray.DataArrayvariable: 3y: 731x: 8700.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0array([[[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]])Coordinates: (4)x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)variable(variable)object'red' 'green' 'blue'array(['red', 'green', 'blue'], dtype=object)Indexes: (3)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))variablePandasIndexPandasIndex(Index(['red', 'green', 'blue'], dtype='object', name='variable'))Attributes: (0)\n\n\nNow we will plot the RGB data to visualize it as a true color image.\n\n# Visualize with simple plot\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\n\n\n\n\n\n\nWhat happened?\nWell we did not alter the robust parameter. Let’s set it to True and see what happens!\n\n# Visualize with true color plot\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\n\n\nPlot Summary\nThe output of a) shows a black and white outline of the area we are working with, while b) shows us a more true to color rendering. The robust=True parameter that we added will eliminate any outliers that may alter the data. It uses 2nd and 98th percentiles of the data to compute the color limits."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/hwk4-task2-false-color-MORRIS-SIBAJA.html#false-color-image",
    "href": "posts/2024-12-02-thomas-fire/hwk4-task2-false-color-MORRIS-SIBAJA.html#false-color-image",
    "title": "Thomas Fire (2017) False Color",
    "section": "False color image",
    "text": "False color image\nTo visualize specific features like vegetation health or fire impacts, we can create false color imagery using the red, near infrared, and short wave infrared bands.\n\n# Visualize with false color plot\nlandsat_df[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\n\nMap the False Color Image with Fire Perimeter\nLastly, we can overlay the false color imagery with critical geographical features like the fire perimeters we imported before.\n\n# Compare CRS\nprint(landsat_df.rio.crs)\nprint(thomas_2017.crs)\n\nEPSG:32611\nEPSG:4326\n\n\n\n# Reproject AOI to RGB CRS\nthomas_2017 = thomas_2017.to_crs(landsat_df.rio.crs)\nprint('Matched CRS?:',  landsat_df.rio.crs == thomas_2017.crs)\n\nMatched CRS?: True\n\n\n\n# Plot of false color raster with buffer overlay\nfig, ax = plt.subplots(figsize=(6, 7))  # Directly set size and aspect\nlandsat_df[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(\n                robust=True,\n                ax=ax)\nthomas_2017.boundary.plot(ax=ax, color=\"maroon\")\nax.axis(\"off\")\nax.legend([\"Thomas Fire Boundary\"])\nfig.suptitle(\"2017 Thomas Fire Scar\", color = 'black', fontsize = 14, fontweight='light', y=0.855)\nax.set_title(\"False colors with Short Wave Infrared, Near-Infrared, & Red Wavelengths\", fontsize=9)\nfig.text(x=.5,y=.2,\n        s='Data Source: CAL FIRE via Data.gov &  Microsof Planetary Computer data catalogue',\n        ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nfig.text(x=.5,y=.18,\n        s='Date Accessed: 11/19/24',\n        ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nFigure Description\nThis map uses false-color imagery to highlight vegetation and fire-affected areas within the Thomas Fire boundary from 2017. In this visualization, near-infrared (NIR) is represented as green, shortwave infrared (SWIR) as red, and red light as blue. Healthy vegetation strongly reflects NIR, making those areas appear green, while it absorbs red and SWIR wavelengths. Burned areas, often rich in iron oxides, reflect SWIR more strongly, appearing red in the image. This method helps distinguish fire scars and vegetation loss more effectively compared to true-color images, which use visible red, green, and blue wavelengths and may not clearly show such contrasts."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "",
    "text": "Author: Ian Morris-Sibaja\nThis project can be found at https://github.com/imsibaja/eds220-hw4"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#about",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#about",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "About:",
    "text": "About:\n\nPurpose:\nThis notebook outlines the process of selecting the fire perimeter for the 2017 Thomas Fire. This fire ravaged over 280,000 acres in Santa Barbara and Ventura Counties and is considered one of the most dangerous wildfires in California’s history. The selected fire perimeter will be handy when visualizing the fire scars in the next notebook “Thomas Fire (2017) False Color”.\n### Highlights: - Import and explore California fire perimeters data - Select for the 2017 Thomas Fire - Visualize and export the Thomas Fire as a GeoJSON\n\n\nAbout the data: California Fire Perimeters\nThis database contains spatial distribution information of both wild and prescribed fires in California. The data comes with a warning of its incompleteness. Some records were lost or damaged, so fire perimeters may be missing. There may also be duplicate or an over estimation of fire perimeters. The database is maintained by the California Department of Forestry and Fire Protection’s Fire and Resource Assessment Program.\n\n\nReferences:\nCalFire Fire Perimeter Data\nCalifornia Department of Forestry and Fire Protection (CAL FIRE), [calfire_all.gdb], [2024-11-17], retrieved from CAL FIRE data portal.\nGalaz García, Carmen. Assignment4 – EDS 220 - Working with Environmental Datasets. (n.d.). https://meds-eds-220.github.io/MEDS-eds-220-course/assignments/assignment4.html"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#import-libraries-and-data",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#import-libraries-and-data",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "Import Libraries and Data",
    "text": "Import Libraries and Data\nAs always, the absolute first step of any analysis is to import any necessary packages and the data.\n\n# Import packages\nimport geopandas as gpd\nimport os\n\n\n# Import data\nfp = os.path.join(\"data\", \"California_Fire_Perimeters_4280901625349411772.geojson\")\ncal_fire = gpd.read_file(fp)"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#thomas-fire-perimeter-data-retreival",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#thomas-fire-perimeter-data-retreival",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "Thomas Fire Perimeter Data Retreival",
    "text": "Thomas Fire Perimeter Data Retreival\n\nStep 1: Understand the Dataset\nBefore diving into analysis, it’s essential to explore and understand the data.\nWe can plot the data to visualize it and confirm its spatial extent.\n\n# Visualize data\ncal_fire.plot()\n\n\n\n\n\n\n\n\nCheck the dataset’s CRS (Coordinate Reference System) to determine if it’s projected or geographic.\n\n# Check CRS of data\ncal_fire.crs\n\n&lt;Geographic 2D CRS: EPSG:4326&gt;\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nUse commands like head(), and .dtypes to preview the data and check its column types.\n\n# View first five rows of df\ncal_fire.head()\n\n\n\n\n\n\n\n\nOBJECTID\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NAME\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n0\n1\n2023.0\nCA\nCDF\nSKU\nWHITWORTH\n00004808\nSat, 17 Jun 2023 00:00:00 GMT\nSat, 17 Jun 2023 00:00:00 GMT\n5.0\n1.0\n1.0\n5.729125\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020.0\nPOLYGON ((-122.91148 41.53201, -122.91150 41.5...\n\n\n1\n2\n2023.0\nCA\nLRA\nBTU\nKAISER\n00010225\nFri, 02 Jun 2023 00:00:00 GMT\nFri, 02 Jun 2023 00:00:00 GMT\n5.0\n1.0\n1.0\n13.602380\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020.0\nPOLYGON ((-121.96182 39.82970, -121.96181 39.8...\n\n\n2\n3\n2023.0\nCA\nCDF\nAEU\nJACKSON\n00017640\nSat, 01 Jul 2023 00:00:00 GMT\nSun, 02 Jul 2023 00:00:00 GMT\n2.0\n1.0\n1.0\n27.814460\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020.0\nPOLYGON ((-120.90644 38.29537, -120.90397 38.2...\n\n\n3\n4\n2023.0\nCA\nCDF\nAEU\nCARBON\n00018821\nTue, 11 Jul 2023 00:00:00 GMT\nTue, 11 Jul 2023 00:00:00 GMT\n9.0\n1.0\n1.0\n58.760230\nNone\nNone\n{CB41DB0A-E4B1-489D-A4EA-738F2CD6DB3B}\nNone\nNone\n2020.0\nPOLYGON ((-120.98579 38.44344, -120.98488 38.4...\n\n\n4\n5\n2023.0\nCA\nCDF\nAEU\nLIBERTY\n00018876\nTue, 11 Jul 2023 00:00:00 GMT\nWed, 12 Jul 2023 00:00:00 GMT\n14.0\n1.0\n1.0\n70.979000\nNone\nNone\n{F83F70A4-07A7-40B8-BD51-10CCC1C30D63}\nNone\nNone\n2020.0\nPOLYGON ((-120.98886 38.25035, -120.98895 38.2...\n\n\n\n\n\n\n\n\n# Check dtypes of df\ncal_fire.dtypes\n\nOBJECTID           int64\nYEAR_            float64\nSTATE             object\nAGENCY            object\nUNIT_ID           object\nFIRE_NAME         object\nINC_NUM           object\nALARM_DATE        object\nCONT_DATE         object\nCAUSE            float64\nC_METHOD         float64\nOBJECTIVE        float64\nGIS_ACRES        float64\nCOMMENTS          object\nCOMPLEX_NAME      object\nIRWINID           object\nFIRE_NUM          object\nCOMPLEX_ID        object\nDECADES          float64\ngeometry        geometry\ndtype: object\n\n\n\n\nData Summary\nFrom the CRS data we can see that this data is geographic and 2D. It contains open-access data about fire perimeters in California and contains dates, locations, names, causes, and other relvant data to the fires."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#select-the-thomas-fire-boundary",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#select-the-thomas-fire-boundary",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "Select the Thomas Fire Boundary",
    "text": "Select the Thomas Fire Boundary\nFilter the dataset to isolate the boundary for the 2017 Thomas Fire.\n\nClean Dataframe\nCleaning the dataset always heads in filtering.\n\n# Clean column names\ncal_fire = cal_fire.rename(columns={\"YEAR_\": \"YEAR\"})\ncal_fire.columns = cal_fire.columns.str.lower()\n\n# Drop data with no years\ncal_fire = cal_fire.dropna(subset=['year'])\n\n# Turn year column dataype to int\ncal_fire[\"year\"] = cal_fire[\"year\"].astype(int)\n\n\n# Preview cleaned df\ncal_fire.head()\n\n\n\n\n\n\n\n\nobjectid\nyear\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_name\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n0\n1\n2023\nCA\nCDF\nSKU\nWHITWORTH\n00004808\nSat, 17 Jun 2023 00:00:00 GMT\nSat, 17 Jun 2023 00:00:00 GMT\n5.0\n1.0\n1.0\n5.729125\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020.0\nPOLYGON ((-122.91148 41.53201, -122.91150 41.5...\n\n\n1\n2\n2023\nCA\nLRA\nBTU\nKAISER\n00010225\nFri, 02 Jun 2023 00:00:00 GMT\nFri, 02 Jun 2023 00:00:00 GMT\n5.0\n1.0\n1.0\n13.602380\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020.0\nPOLYGON ((-121.96182 39.82970, -121.96181 39.8...\n\n\n2\n3\n2023\nCA\nCDF\nAEU\nJACKSON\n00017640\nSat, 01 Jul 2023 00:00:00 GMT\nSun, 02 Jul 2023 00:00:00 GMT\n2.0\n1.0\n1.0\n27.814460\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020.0\nPOLYGON ((-120.90644 38.29537, -120.90397 38.2...\n\n\n3\n4\n2023\nCA\nCDF\nAEU\nCARBON\n00018821\nTue, 11 Jul 2023 00:00:00 GMT\nTue, 11 Jul 2023 00:00:00 GMT\n9.0\n1.0\n1.0\n58.760230\nNone\nNone\n{CB41DB0A-E4B1-489D-A4EA-738F2CD6DB3B}\nNone\nNone\n2020.0\nPOLYGON ((-120.98579 38.44344, -120.98488 38.4...\n\n\n4\n5\n2023\nCA\nCDF\nAEU\nLIBERTY\n00018876\nTue, 11 Jul 2023 00:00:00 GMT\nWed, 12 Jul 2023 00:00:00 GMT\n14.0\n1.0\n1.0\n70.979000\nNone\nNone\n{F83F70A4-07A7-40B8-BD51-10CCC1C30D63}\nNone\nNone\n2020.0\nPOLYGON ((-120.98886 38.25035, -120.98895 38.2...\n\n\n\n\n\n\n\n\n\nCreate Condidtionals\nCreating conditionals eases selecting specific data ranges.\n\n# Create conditinals to select for thomas fire\nis_thomas = cal_fire[\"fire_name\"] == \"THOMAS\"\nis_2017 = cal_fire[\"year\"] == 2017\n\n# Select for Thomas Fire\nthomas_2017 = cal_fire[is_thomas & is_2017]\nthomas_2017.head()\n\n\n\n\n\n\n\n\nobjectid\nyear\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_name\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n2654\n2655\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\nMon, 04 Dec 2017 00:00:00 GMT\nFri, 12 Jan 2018 00:00:00 GMT\n9.0\n7.0\n1.0\n281790.9\nCONT_DATE based on Inciweb\nNone\n\nNone\nNone\n2010.0\nMULTIPOLYGON (((-119.62046 34.44382, -119.6209...\n\n\n\n\n\n\n\n\n\nVisualize\nBy plotting the data, we can visualize the boundary that we have created.\n\n# Visualize Thomas Fire boundary\nthomas_2017.plot()\n\n\n\n\n\n\n\n\nLooks great!"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#save-the-fire-boundary",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#save-the-fire-boundary",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "Save the Fire Boundary",
    "text": "Save the Fire Boundary\nThe last step is to export the selected fire boundary as a geospatial file.\nThere are a couple considerations to think of when selecting what file type to choose. GeoJSON is lightweight, easy to share, and widely supported by web-based mapping tools. Shapefile is a classic format with broad compatibility BUT it is dependent on multiple files.\n\n# Save Thomas Fire df as GeoJSON\nthomas_2017.to_file(\"data/thomas_2017.geojson\", driver=\"GeoJSON\")\n\n\nExplain the File Format Choice\nI chose the GeoJSON due to its readabiilty and ease of import compared to a .shp file. A .shp file tends to have a directly of files that it is reliant on vs a GeoJSON is self contained."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-false-color-MORRIS-SIBAJA.html",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-false-color-MORRIS-SIBAJA.html",
    "title": "Thomas Fire (2017) False Color",
    "section": "",
    "text": "Author: Ian Morris-Sibaja\nThis project can be found at https://github.com/imsibaja/eds220-hw4"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-false-color-MORRIS-SIBAJA.html#about",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-false-color-MORRIS-SIBAJA.html#about",
    "title": "Thomas Fire (2017) False Color",
    "section": "About:",
    "text": "About:\n\nPurpose:\nThis notebook outlines the process of visualizing Landsat multispectral geospatial data to analyze the 2017 Thomas Fire. This fire burned over 280,000 acres in Ventura and Santa Barbara counties, causing significant damage to human’s and their surrounding environment. This analysis emphasizes burn severity and its impacts on vegetation, known as fire scars, shown using false coloring.\n### Highlights:\n\nImport and explore Landsat data to analyze the Thomas Fires\nCreate true and false color images to highlight the fire’s impact\nVisualize the false color fire scar alongside perimeter data for detailed analysis\n\n\n\nAbout the data: Landset 8 Satellite Collection\nThis dataset consists of simplified bands (red, green, blue, near-infrared, and shortwave infrared) from Landsat Collection 2 Level-2 surface reflectance data, which was atmospherically corrected and captured by NASA’s Landsat 8 satellite. It was sourced from the Microsoft Planetary Computer data catalog and preprocessed to exclude non-land areas and reduce spatial resolution for ease of computation.\n\n\nReferences:\nLandsat Data from Microsoft’s Planetary Computer Data Catalogue,\n\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 4-5 Thematic Mapper Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9IAXOVV\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 7 Enhanced Thematic Mapper Plus Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9C7I13B\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 8-9 Operational Land Imager / Thermal Infrared Sensor Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9OGBGM6\n\nGalaz García, Carmen. Assignment4 – EDS 220 - Working with Environmental Datasets. (n.d.). https://meds-eds-220.github.io/MEDS-eds-220-course/assignments/assignment4.html"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-false-color-MORRIS-SIBAJA.html#import-libraries",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-false-color-MORRIS-SIBAJA.html#import-libraries",
    "title": "Thomas Fire (2017) False Color",
    "section": "Import Libraries",
    "text": "Import Libraries\nFirst, we need to import the necessary packages to perform the analysis.\n\n# Import packages\nimport rioxarray as rioxr\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport os"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-false-color-MORRIS-SIBAJA.html#true-color-image",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-false-color-MORRIS-SIBAJA.html#true-color-image",
    "title": "Thomas Fire (2017) False Color",
    "section": "True color image",
    "text": "True color image\n\nStep 1: Explore the Data\nWe begin by iporting the data, hosted within this repository.\n\n# Import data\nlandsat_fp = os.path.join(\"data\", \"landsat8-2018-01-26-sb-simplified.nc\")\nlandsat_df = rioxr.open_rasterio(landsat_fp)\n\nthomas_fp = os.path.join(\"data\", \"thomas_2017.geojson\")\nthomas_2017 = gpd.read_file(thomas_fp)\n\nNext, we examine the dataset to understand its structure. After exploring the data, we will summarize in paragraph form.\n\n# Show preliminary xarrary.Dataset\nlandsat_df\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\n\n# Show dimensions of dataset \nprint(landsat_df.dims)\n\nFrozenMappingWarningOnValuesAccess({'band': 1, 'x': 870, 'y': 731})\n\n\n\n# Show CRS of dataset \nprint(landsat_df.rio.crs)\n\nEPSG:32611\n\n\n\n# Show datatypes of dataset \nprint(landsat_df.dtypes)\n\nFrozen({'red': dtype('float64'), 'green': dtype('float64'), 'blue': dtype('float64'), 'nir08': dtype('float64'), 'swir22': dtype('float64')})\n\n\n\nData Summary\nThis dataset is a 2D dataset with a single band. There are five wavelength ranges captures, red, green, blue, near infrared and short wave infrared. The dataset is of CRS EPSG:32611.\n\n\nStep 2: Drop the Band Dimension\nTo ease visualizations, we will simplify the dataset by removing unnecessary dimensions.\n\n# Drop band dimension of data\nlandsat_df = landsat_df.drop_vars(\"band\").squeeze()\n\n\n# View updated dataset\nlandsat_df.head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 1kB\nDimensions:      (x: 5, y: 5)\nCoordinates:\n  * x            (x) float64 40B 1.213e+05 1.216e+05 ... 1.221e+05 1.224e+05\n  * y            (y) float64 40B 3.952e+06 3.952e+06 ... 3.952e+06 3.951e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (y, x) float64 200B ...\n    green        (y, x) float64 200B ...\n    blue         (y, x) float64 200B ...\n    nir08        (y, x) float64 200B ...\n    swir22       (y, x) float64 200B ...xarray.DatasetDimensions:x: 5y: 5Coordinates: (3)x(x)float641.213e+05 1.216e+05 ... 1.224e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., 122115., 122385.])y(y)float643.952e+06 3.952e+06 ... 3.951e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., 3951585., 3951315.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]Indexes: (2)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0], dtype='float64', name='x'))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0], dtype='float64', name='y'))Attributes: (0)\n\n\n\n\n\nSelect RGB Bands\nBy extracting the red, green, and blue bands we can begin to create an RGB image.\n\n# Select rgb variables\nlandsat_df[[\"red\", \"green\", \"blue\"]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 15MB\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (y, x) float64 5MB ...\n    green        (y, x) float64 5MB ...\n    blue         (y, x) float64 5MB ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (3)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (2)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nConverting the dataframe to an array will easily allow us to plot using the plot.imshow() method.\n\n# Convert to array\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (variable: 3, y: 731, x: 870)&gt; Size: 15MB\narray([[[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]])\nCoordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n  * variable     (variable) object 24B 'red' 'green' 'blue'xarray.DataArrayvariable: 3y: 731x: 8700.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0array([[[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]])Coordinates: (4)x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)variable(variable)object'red' 'green' 'blue'array(['red', 'green', 'blue'], dtype=object)Indexes: (3)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))variablePandasIndexPandasIndex(Index(['red', 'green', 'blue'], dtype='object', name='variable'))Attributes: (0)\n\n\nNow we will plot the RGB data to visualize it as a true color image.\n\n# Visualize with simple plot\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\n\n\n\n\n\n\nWhat happened?\nWell we did not alter the robust parameter. Let’s set it to True and see what happens!\n\n# Visualize with true color plot\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\n\n\nPlot Summary\nThe output of a) shows a black and white outline of the area we are working with, while b) shows us a more true to color rendering. The robust=True parameter that we added will eliminate any outliers that may alter the data. It uses 2nd and 98th percentiles of the data to compute the color limits."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-false-color-MORRIS-SIBAJA.html#false-color-image",
    "href": "posts/2024-12-02-thomas-fire/python files/hwk4-task2-false-color-MORRIS-SIBAJA.html#false-color-image",
    "title": "Thomas Fire (2017) False Color",
    "section": "False color image",
    "text": "False color image\nTo visualize specific features like vegetation health or fire impacts, we can create false color imagery using the red, near infrared, and short wave infrared bands.\n\n# Visualize with false color plot\nlandsat_df[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\n\nMap the False Color Image with Fire Perimeter\nLastly, we can overlay the false color imagery with critical geographical features like the fire perimeters we imported before.\n\n# Compare CRS\nprint(landsat_df.rio.crs)\nprint(thomas_2017.crs)\n\nEPSG:32611\nEPSG:4326\n\n\n\n# Reproject AOI to RGB CRS\nthomas_2017 = thomas_2017.to_crs(landsat_df.rio.crs)\nprint('Matched CRS?:',  landsat_df.rio.crs == thomas_2017.crs)\n\nMatched CRS?: True\n\n\n\n# Plot of false color raster with buffer overlay\nfig, ax = plt.subplots(figsize=(6, 7))  # Directly set size and aspect\nlandsat_df[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(\n                robust=True,\n                ax=ax)\nthomas_2017.boundary.plot(ax=ax, color=\"maroon\")\nax.axis(\"off\")\nax.legend([\"Thomas Fire Boundary\"])\nfig.suptitle(\"2017 Thomas Fire Scar\", color = 'black', fontsize = 14, fontweight='light', y=0.855)\nax.set_title(\"False colors with Short Wave Infrared, Near-Infrared, & Red Wavelengths\", fontsize=9)\nfig.text(x=.5,y=.2,\n        s='Data Source: CAL FIRE via Data.gov &  Microsof Planetary Computer data catalogue',\n        ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nfig.text(x=.5,y=.18,\n        s='Date Accessed: 11/19/24',\n        ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nFigure Description\nThis map uses false-color imagery to highlight vegetation and fire-affected areas within the Thomas Fire boundary from 2017. In this visualization, near-infrared (NIR) is represented as green, shortwave infrared (SWIR) as red, and red light as blue. Healthy vegetation strongly reflects NIR, making those areas appear green, while it absorbs red and SWIR wavelengths. Burned areas, often rich in iron oxides, reflect SWIR more strongly, appearing red in the image. This method helps distinguish fire scars and vegetation loss more effectively compared to true-color images, which use visible red, green, and blue wavelengths and may not clearly show such contrasts."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-false-color-MORRIS-SIBAJA.html",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-false-color-MORRIS-SIBAJA.html",
    "title": "Thomas Fire (2017) False Color",
    "section": "",
    "text": "Author: Ian Morris-Sibaja\nThis project can be found at https://github.com/imsibaja/eds220-hw4"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-false-color-MORRIS-SIBAJA.html#about",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-false-color-MORRIS-SIBAJA.html#about",
    "title": "Thomas Fire (2017) False Color",
    "section": "About:",
    "text": "About:\n\nPurpose:\nThis notebook outlines the process of visualizing Landsat multispectral geospatial data to analyze the 2017 Thomas Fire. This fire burned over 280,000 acres in Ventura and Santa Barbara counties, causing significant damage to human’s and their surrounding environment. This analysis emphasizes burn severity and its impacts on vegetation, known as fire scars, shown using false coloring.\n### Highlights:\n\nImport and explore Landsat data to analyze the Thomas Fires\nCreate true and false color images to highlight the fire’s impact\nVisualize the false color fire scar alongside perimeter data for detailed analysis\n\n\n\nAbout the data: Landset 8 Satellite Collection\nThis dataset consists of simplified bands (red, green, blue, near-infrared, and shortwave infrared) from Landsat Collection 2 Level-2 surface reflectance data, which was atmospherically corrected and captured by NASA’s Landsat 8 satellite. It was sourced from the Microsoft Planetary Computer data catalog and preprocessed to exclude non-land areas and reduce spatial resolution for ease of computation.\n\n\nReferences:\nLandsat Data from Microsoft’s Planetary Computer Data Catalogue,\n\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 4-5 Thematic Mapper Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9IAXOVV\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 7 Enhanced Thematic Mapper Plus Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9C7I13B\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 8-9 Operational Land Imager / Thermal Infrared Sensor Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9OGBGM6\n\nGalaz García, Carmen. Assignment4 – EDS 220 - Working with Environmental Datasets. (n.d.). https://meds-eds-220.github.io/MEDS-eds-220-course/assignments/assignment4.html"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-false-color-MORRIS-SIBAJA.html#import-libraries",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-false-color-MORRIS-SIBAJA.html#import-libraries",
    "title": "Thomas Fire (2017) False Color",
    "section": "Import Libraries",
    "text": "Import Libraries\nFirst, we need to import the necessary packages to perform the analysis.\n#| echo=FALSE\nlibrary(reticulate)\nreticulate::use_python(\"/opt/anaconda3/envs/eds-220-env-arm64/bin/python\", required = TRUE)\nreticulate::py_config()\n\n# Import packages\n# sys.prefix = '/opt/anaconda3/envs/eds-220-env'\nimport rioxarray as rioxr\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport os"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-false-color-MORRIS-SIBAJA.html#true-color-image",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-false-color-MORRIS-SIBAJA.html#true-color-image",
    "title": "Thomas Fire (2017) False Color",
    "section": "True color image",
    "text": "True color image\n\nStep 1: Explore the Data\nWe begin by iporting the data, hosted within this repository.\n\n# Import data\nlandsat_fp = os.path.join(\"data\", \"landsat8-2018-01-26-sb-simplified.nc\")\nlandsat_df = rioxr.open_rasterio(landsat_fp)\n\nthomas_fp = os.path.join(\"data\", \"thomas_2017.geojson\")\nthomas_2017 = gpd.read_file(thomas_fp)\n\nNext, we examine the dataset to understand its structure. After exploring the data, we will summarize in paragraph form.\n\n# Show preliminary xarrary.Dataset\nlandsat_df\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\n\n# Show dimensions of dataset \nprint(landsat_df.dims)\n\nFrozenMappingWarningOnValuesAccess({'band': 1, 'x': 870, 'y': 731})\n\n\n\n# Show CRS of dataset \nprint(landsat_df.rio.crs)\n\nEPSG:32611\n\n\n\n# Show datatypes of dataset \nprint(landsat_df.dtypes)\n\nFrozen({'red': dtype('float64'), 'green': dtype('float64'), 'blue': dtype('float64'), 'nir08': dtype('float64'), 'swir22': dtype('float64')})\n\n\n\nData Summary\nThis dataset is a 2D dataset with a single band. There are five wavelength ranges captures, red, green, blue, near infrared and short wave infrared. The dataset is of CRS EPSG:32611.\n\n\nStep 2: Drop the Band Dimension\nTo ease visualizations, we will simplify the dataset by removing unnecessary dimensions.\n\n# Drop band dimension of data\nlandsat_df = landsat_df.drop_vars(\"band\").squeeze()\n\n\n# View updated dataset\nlandsat_df.head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 1kB\nDimensions:      (x: 5, y: 5)\nCoordinates:\n  * x            (x) float64 40B 1.213e+05 1.216e+05 ... 1.221e+05 1.224e+05\n  * y            (y) float64 40B 3.952e+06 3.952e+06 ... 3.952e+06 3.951e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (y, x) float64 200B ...\n    green        (y, x) float64 200B ...\n    blue         (y, x) float64 200B ...\n    nir08        (y, x) float64 200B ...\n    swir22       (y, x) float64 200B ...xarray.DatasetDimensions:x: 5y: 5Coordinates: (3)x(x)float641.213e+05 1.216e+05 ... 1.224e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., 122115., 122385.])y(y)float643.952e+06 3.952e+06 ... 3.951e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., 3951585., 3951315.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]Indexes: (2)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0], dtype='float64', name='x'))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0], dtype='float64', name='y'))Attributes: (0)\n\n\n\n\n\nSelect RGB Bands\nBy extracting the red, green, and blue bands we can begin to create an RGB image.\n\n# Select rgb variables\nlandsat_df[[\"red\", \"green\", \"blue\"]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 15MB\nDimensions:      (y: 731, x: 870)\nCoordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (y, x) float64 5MB ...\n    green        (y, x) float64 5MB ...\n    blue         (y, x) float64 5MB ...xarray.DatasetDimensions:y: 731x: 870Coordinates: (3)x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (3)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (2)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nConverting the dataframe to an array will easily allow us to plot using the plot.imshow() method.\n\n# Convert to array\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (variable: 3, y: 731, x: 870)&gt; Size: 15MB\narray([[[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]])\nCoordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n  * variable     (variable) object 24B 'red' 'green' 'blue'xarray.DataArrayvariable: 3y: 731x: 8700.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0array([[[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]])Coordinates: (4)x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)variable(variable)object'red' 'green' 'blue'array(['red', 'green', 'blue'], dtype=object)Indexes: (3)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))variablePandasIndexPandasIndex(Index(['red', 'green', 'blue'], dtype='object', name='variable'))Attributes: (0)\n\n\nNow we will plot the RGB data to visualize it as a true color image.\n\n# Visualize with simple plot\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [0.0..54930.71604938272].\n\n\n\n\n\n\n\n\n\n\n\nWhat happened?\nWell we did not alter the robust parameter. Let’s set it to True and see what happens!\n\n# Visualize with true color plot\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\n\n\nPlot Summary\nThe output of a) shows a black and white outline of the area we are working with, while b) shows us a more true to color rendering. The robust=True parameter that we added will eliminate any outliers that may alter the data. It uses 2nd and 98th percentiles of the data to compute the color limits."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-false-color-MORRIS-SIBAJA.html#false-color-image",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-false-color-MORRIS-SIBAJA.html#false-color-image",
    "title": "Thomas Fire (2017) False Color",
    "section": "False color image",
    "text": "False color image\nTo visualize specific features like vegetation health or fire impacts, we can create false color imagery using the red, near infrared, and short wave infrared bands.\n\n# Visualize with false color plot\nlandsat_df[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\n\nMap the False Color Image with Fire Perimeter\nLastly, we can overlay the false color imagery with critical geographical features like the fire perimeters we imported before.\n\n# Compare CRS\nprint(landsat_df.rio.crs)\nprint(thomas_2017.crs)\n\nEPSG:32611\nepsg:4326\n\n\n\n# Reproject AOI to RGB CRS\nthomas_2017 = thomas_2017.to_crs(landsat_df.rio.crs)\nprint('Matched CRS?:',  landsat_df.rio.crs == thomas_2017.crs)\n\nMatched CRS?: True\n\n\n\n# Plot of false color raster with buffer overlay\nfig, ax = plt.subplots(figsize=(6, 7))  # Directly set size and aspect\nlandsat_df[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(\n                robust=True,\n                ax=ax)\nthomas_2017.boundary.plot(ax=ax, color=\"maroon\")\nax.axis(\"off\")\nax.legend([\"Thomas Fire Boundary\"])\nfig.suptitle(\"2017 Thomas Fire Scar\", color = 'black', fontsize = 14, fontweight='light', y=0.855)\nax.set_title(\"False colors with Short Wave Infrared, Near-Infrared, & Red Wavelengths\", fontsize=9)\nfig.text(x=.5,y=.2,\n        s='Data Source: CAL FIRE via Data.gov &  Microsof Planetary Computer data catalogue',\n        ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nfig.text(x=.5,y=.18,\n        s='Date Accessed: 11/19/24',\n        ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nplt.show()\n\n/opt/anaconda3/envs/eds-220-env-arm64/lib/python3.11/site-packages/geopandas/plotting.py:48: ShapelyDeprecationWarning: The 'type' attribute is deprecated, and will be removed in the future. You can use the 'geom_type' attribute instead.\n  if geom is not None and geom.type.startswith(prefix) and not geom.is_empty:\n\n\n\n\n\n\n\n\n\n\n\nFigure Description\nThis map uses false-color imagery to highlight vegetation and fire-affected areas within the Thomas Fire boundary from 2017. In this visualization, near-infrared (NIR) is represented as green, shortwave infrared (SWIR) as red, and red light as blue. Healthy vegetation strongly reflects NIR, making those areas appear green, while it absorbs red and SWIR wavelengths. Burned areas, often rich in iron oxides, reflect SWIR more strongly, appearing red in the image. This method helps distinguish fire scars and vegetation loss more effectively compared to true-color images, which use visible red, green, and blue wavelengths and may not clearly show such contrasts."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task1-reflection-MORRIS-SIBAJA.html",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task1-reflection-MORRIS-SIBAJA.html",
    "title": "Task 1: The politics of pixels reading",
    "section": "",
    "text": "When working with satellite data, it’s easy to assume that it is inherently objective and equally accessible to everyone. However, Bennett et al., in their paper The Politics of Pixels: A Review and Agenda for Critical Remote Sensing (2022 [1]), challenge this assumption, arguing that remote sensing needs a critical lens. They emphasize that various sociopolitical factors influence who collects remotely sensed data, how it’s collected, and ultimately, who benefits from its insights. This reading will encourage you to explore the biases and inequalities that can be embedded in remote sensing technologies and practices.\nReflecting on your personal or professional background, how might sociopolitical factors shape the availability and interpretation of satellite and other remotely sensed data for communities or organizations you’re familiar with?\nGrowing up as a family owned citrus rancher, I recognize how sociopolitical factors influence access to remote sensing data, which is vital for monitoring, say, crop health. Corporate farming usually are the only one who benefit from subsidized or proprietary satellite tools, while smaller farmers like ours may lack access to this kind of recurring high-resolution imagery. This leads to those bigger companies being favored over family businesses such as ours, as their technology leads to higher yield crops. Helping smaller farmers with their accessibility to remote sensing may be essential to addressing these disparities within the working class of farmers.\n\n\nM. M. Bennett, J. K. Chen, L. F. Alvarez León, and C. J. Gleason, “The politics of pixels: A review and agenda for critical remote sensing,” Progress in Human Geography, vol. 46, no. 3, pp. 729–752, Jun. 2022, doi: 10.1177/03091325221074691. Available: https://journals.sagepub.com/doi/10.1177/03091325221074691. [Accessed: Nov. 23, 2024]"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task1-reflection-MORRIS-SIBAJA.html#references",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task1-reflection-MORRIS-SIBAJA.html#references",
    "title": "Task 1: The politics of pixels reading",
    "section": "",
    "text": "M. M. Bennett, J. K. Chen, L. F. Alvarez León, and C. J. Gleason, “The politics of pixels: A review and agenda for critical remote sensing,” Progress in Human Geography, vol. 46, no. 3, pp. 729–752, Jun. 2022, doi: 10.1177/03091325221074691. Available: https://journals.sagepub.com/doi/10.1177/03091325221074691. [Accessed: Nov. 23, 2024]"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "",
    "text": "Author: Ian Morris-Sibaja\nThis project can be found at https://github.com/imsibaja/eds220-hw4"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#about",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#about",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "About:",
    "text": "About:\n\nPurpose:\nThis notebook outlines the process of selecting the fire perimeter for the 2017 Thomas Fire. This fire ravaged over 280,000 acres in Santa Barbara and Ventura Counties and is considered one of the most dangerous wildfires in California’s history. The selected fire perimeter will be handy when visualizing the fire scars in the next notebook “Thomas Fire (2017) False Color”.\n### Highlights: - Import and explore California fire perimeters data - Select for the 2017 Thomas Fire - Visualize and export the Thomas Fire as a GeoJSON\n\n\nAbout the data: California Fire Perimeters\nThis database contains spatial distribution information of both wild and prescribed fires in California. The data comes with a warning of its incompleteness. Some records were lost or damaged, so fire perimeters may be missing. There may also be duplicate or an over estimation of fire perimeters. The database is maintained by the California Department of Forestry and Fire Protection’s Fire and Resource Assessment Program.\n\n\nReferences:\nCalFire Fire Perimeter Data\nCalifornia Department of Forestry and Fire Protection (CAL FIRE), [calfire_all.gdb], [2024-11-17], retrieved from CAL FIRE data portal.\nGalaz García, Carmen. Assignment4 – EDS 220 - Working with Environmental Datasets. (n.d.). https://meds-eds-220.github.io/MEDS-eds-220-course/assignments/assignment4.html"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#import-libraries-and-data",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#import-libraries-and-data",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "Import Libraries and Data",
    "text": "Import Libraries and Data\nAs always, the absolute first step of any analysis is to import any necessary packages and the data.\n\n# Import packages\nimport geopandas as gpd\nimport os\n\n\n# Import data\nfp = os.path.join(\"data\", \"California_Fire_Perimeters_4280901625349411772.geojson\")\ncal_fire = gpd.read_file(fp)"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#thomas-fire-perimeter-data-retreival",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#thomas-fire-perimeter-data-retreival",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "Thomas Fire Perimeter Data Retreival",
    "text": "Thomas Fire Perimeter Data Retreival\n\nStep 1: Understand the Dataset\nBefore diving into analysis, it’s essential to explore and understand the data.\nWe can plot the data to visualize it and confirm its spatial extent.\n\n# Visualize data\ncal_fire.plot()\n\n\n\n\n\n\n\n\nCheck the dataset’s CRS (Coordinate Reference System) to determine if it’s projected or geographic.\n\n# Check CRS of data\ncal_fire.crs\n\n&lt;Geographic 2D CRS: EPSG:4326&gt;\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nUse commands like head(), and .dtypes to preview the data and check its column types.\n\n# View first five rows of df\ncal_fire.head()\n\n\n\n\n\n\n\n\nOBJECTID\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NAME\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n0\n1\n2023.0\nCA\nCDF\nSKU\nWHITWORTH\n00004808\nSat, 17 Jun 2023 00:00:00 GMT\nSat, 17 Jun 2023 00:00:00 GMT\n5.0\n1.0\n1.0\n5.729125\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020.0\nPOLYGON ((-122.91148 41.53201, -122.91150 41.5...\n\n\n1\n2\n2023.0\nCA\nLRA\nBTU\nKAISER\n00010225\nFri, 02 Jun 2023 00:00:00 GMT\nFri, 02 Jun 2023 00:00:00 GMT\n5.0\n1.0\n1.0\n13.602380\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020.0\nPOLYGON ((-121.96182 39.82970, -121.96181 39.8...\n\n\n2\n3\n2023.0\nCA\nCDF\nAEU\nJACKSON\n00017640\nSat, 01 Jul 2023 00:00:00 GMT\nSun, 02 Jul 2023 00:00:00 GMT\n2.0\n1.0\n1.0\n27.814460\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020.0\nPOLYGON ((-120.90644 38.29537, -120.90397 38.2...\n\n\n3\n4\n2023.0\nCA\nCDF\nAEU\nCARBON\n00018821\nTue, 11 Jul 2023 00:00:00 GMT\nTue, 11 Jul 2023 00:00:00 GMT\n9.0\n1.0\n1.0\n58.760230\nNone\nNone\n{CB41DB0A-E4B1-489D-A4EA-738F2CD6DB3B}\nNone\nNone\n2020.0\nPOLYGON ((-120.98579 38.44344, -120.98488 38.4...\n\n\n4\n5\n2023.0\nCA\nCDF\nAEU\nLIBERTY\n00018876\nTue, 11 Jul 2023 00:00:00 GMT\nWed, 12 Jul 2023 00:00:00 GMT\n14.0\n1.0\n1.0\n70.979000\nNone\nNone\n{F83F70A4-07A7-40B8-BD51-10CCC1C30D63}\nNone\nNone\n2020.0\nPOLYGON ((-120.98886 38.25035, -120.98895 38.2...\n\n\n\n\n\n\n\n\n# Check dtypes of df\ncal_fire.dtypes\n\nOBJECTID           int64\nYEAR_            float64\nSTATE             object\nAGENCY            object\nUNIT_ID           object\nFIRE_NAME         object\nINC_NUM           object\nALARM_DATE        object\nCONT_DATE         object\nCAUSE            float64\nC_METHOD         float64\nOBJECTIVE        float64\nGIS_ACRES        float64\nCOMMENTS          object\nCOMPLEX_NAME      object\nIRWINID           object\nFIRE_NUM          object\nCOMPLEX_ID        object\nDECADES          float64\ngeometry        geometry\ndtype: object\n\n\n\n\nData Summary\nFrom the CRS data we can see that this data is geographic and 2D. It contains open-access data about fire perimeters in California and contains dates, locations, names, causes, and other relvant data to the fires."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#select-the-thomas-fire-boundary",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#select-the-thomas-fire-boundary",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "Select the Thomas Fire Boundary",
    "text": "Select the Thomas Fire Boundary\nFilter the dataset to isolate the boundary for the 2017 Thomas Fire.\n\nClean Dataframe\nCleaning the dataset always heads in filtering.\n\n# Clean column names\ncal_fire = cal_fire.rename(columns={\"YEAR_\": \"YEAR\"})\ncal_fire.columns = cal_fire.columns.str.lower()\n\n# Drop data with no years\ncal_fire = cal_fire.dropna(subset=['year'])\n\n# Turn year column dataype to int\ncal_fire[\"year\"] = cal_fire[\"year\"].astype(int)\n\n\n# Preview cleaned df\ncal_fire.head()\n\n\n\n\n\n\n\n\nobjectid\nyear\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_name\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n0\n1\n2023\nCA\nCDF\nSKU\nWHITWORTH\n00004808\nSat, 17 Jun 2023 00:00:00 GMT\nSat, 17 Jun 2023 00:00:00 GMT\n5.0\n1.0\n1.0\n5.729125\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020.0\nPOLYGON ((-122.91148 41.53201, -122.91150 41.5...\n\n\n1\n2\n2023\nCA\nLRA\nBTU\nKAISER\n00010225\nFri, 02 Jun 2023 00:00:00 GMT\nFri, 02 Jun 2023 00:00:00 GMT\n5.0\n1.0\n1.0\n13.602380\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020.0\nPOLYGON ((-121.96182 39.82970, -121.96181 39.8...\n\n\n2\n3\n2023\nCA\nCDF\nAEU\nJACKSON\n00017640\nSat, 01 Jul 2023 00:00:00 GMT\nSun, 02 Jul 2023 00:00:00 GMT\n2.0\n1.0\n1.0\n27.814460\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020.0\nPOLYGON ((-120.90644 38.29537, -120.90397 38.2...\n\n\n3\n4\n2023\nCA\nCDF\nAEU\nCARBON\n00018821\nTue, 11 Jul 2023 00:00:00 GMT\nTue, 11 Jul 2023 00:00:00 GMT\n9.0\n1.0\n1.0\n58.760230\nNone\nNone\n{CB41DB0A-E4B1-489D-A4EA-738F2CD6DB3B}\nNone\nNone\n2020.0\nPOLYGON ((-120.98579 38.44344, -120.98488 38.4...\n\n\n4\n5\n2023\nCA\nCDF\nAEU\nLIBERTY\n00018876\nTue, 11 Jul 2023 00:00:00 GMT\nWed, 12 Jul 2023 00:00:00 GMT\n14.0\n1.0\n1.0\n70.979000\nNone\nNone\n{F83F70A4-07A7-40B8-BD51-10CCC1C30D63}\nNone\nNone\n2020.0\nPOLYGON ((-120.98886 38.25035, -120.98895 38.2...\n\n\n\n\n\n\n\n\n\nCreate Condidtionals\nCreating conditionals eases selecting specific data ranges.\n\n# Create conditinals to select for thomas fire\nis_thomas = cal_fire[\"fire_name\"] == \"THOMAS\"\nis_2017 = cal_fire[\"year\"] == 2017\n\n# Select for Thomas Fire\nthomas_2017 = cal_fire[is_thomas & is_2017]\nthomas_2017.head()\n\n\n\n\n\n\n\n\nobjectid\nyear\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_name\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n2654\n2655\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\nMon, 04 Dec 2017 00:00:00 GMT\nFri, 12 Jan 2018 00:00:00 GMT\n9.0\n7.0\n1.0\n281790.9\nCONT_DATE based on Inciweb\nNone\n\nNone\nNone\n2010.0\nMULTIPOLYGON (((-119.62046 34.44382, -119.6209...\n\n\n\n\n\n\n\n\n\nVisualize\nBy plotting the data, we can visualize the boundary that we have created.\n\n# Visualize Thomas Fire boundary\nthomas_2017.plot()\n\n\n\n\n\n\n\n\nLooks great!"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#save-the-fire-boundary",
    "href": "posts/2024-12-02-thomas-fire/python-files/hwk4-task2-fire-perimeter-MORRIS-SIBAJA.html#save-the-fire-boundary",
    "title": "Thomas Fire (2017) Perimeter",
    "section": "Save the Fire Boundary",
    "text": "Save the Fire Boundary\nThe last step is to export the selected fire boundary as a geospatial file.\nThere are a couple considerations to think of when selecting what file type to choose. GeoJSON is lightweight, easy to share, and widely supported by web-based mapping tools. Shapefile is a classic format with broad compatibility BUT it is dependent on multiple files.\n\n# Save Thomas Fire df as GeoJSON\nthomas_2017.to_file(\"data/thomas_2017.geojson\", driver=\"GeoJSON\")\n\n\nExplain the File Format Choice\nI chose the GeoJSON due to its readabiilty and ease of import compared to a .shp file. A .shp file tends to have a directly of files that it is reliant on vs a GeoJSON is self contained."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/final-project-thomas-fire.html",
    "href": "posts/2024-12-02-thomas-fire/python-files/final-project-thomas-fire.html",
    "title": "The Environmental Effects of the 2017 Thomas Fire",
    "section": "",
    "text": "This project can be found at https://github.com/imsibaja/eds222-final-project"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/final-project-thomas-fire.html#about",
    "href": "posts/2024-12-02-thomas-fire/python-files/final-project-thomas-fire.html#about",
    "title": "The Environmental Effects of the 2017 Thomas Fire",
    "section": "About:",
    "text": "About:\n\nPurpose:\nThis notebook explores the 2017 Thomas Fire, one of California’s largest wildfires, which burned over 280,000 acres across Ventura and Santa Barbara counties, causing extensive environmental damage, including vegetation loss, soil erosion, and increased flood risks. This notebook examines the fire’s impact on air quality using AQI data from the US Environmental Protection Agency and visualizes burn severity and fire scars using false-colored Landsat multispectral geospatial data.\n\n\nHighlights:\n\nImport and explore AQI and Landsat data to analyze the Thomas Fires\nCreate time series maps to explore the impact of the wildfires on AQI\nCreate true and false color images to highlight the fire’s bredth\nVisualize the false color fire scar alongside perimeter data for detailed analysis\n\n\n\nAbout the data:\n\nU.S. Air Quality Index (AQI)\nThe U.S. Air Quality Index (AQI), developed by the EPA, communicates outdoor air quality and associated health risks through six color-coded categories, ranging from “Good” (AQI ≤ 50) to “Hazardous” (AQI &gt; 300). AQI values up to 100 indicate satisfactory air quality, aligned with national health standards, while values above 100 signal unhealthy conditions—initially for sensitive groups and eventually for all as pollution levels rise. The color-coded system enables quick identification of air quality concerns in communities.\n\n\nLandset 8 Satellite Collection\nThis dataset consists of simplified bands (red, green, blue, near-infrared, and shortwave infrared) from Landsat Collection 2 Level-2 surface reflectance data, which was atmospherically corrected and captured by NASA’s Landsat 8 satellite. It was sourced from the Microsoft Planetary Computer data catalog and preprocessed to exclude non-land areas and reduce spatial resolution for ease of computation.\n\n\n\nObjectives:\n\nWrangle date and string data and combine data frames for analysis\nVisualize time series and create polished workflows\nManipulate raster and vector data using Rasterio and GeoPandass\n\nImplement Git for version control following best practices\nEnsure collaboration and reproducibility with structured workflows\n\n\n\nReferences:\nLandsat Data from Microsoft’s Planetary Computer Data Catalogue, AQI Data from the EPA’s daily AQI summaries\n\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 4-5 Thematic Mapper Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9IAXOVV\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 7 Enhanced Thematic Mapper Plus Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9C7I13B\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 8-9 Operational Land Imager / Thermal Infrared Sensor Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9OGBGM6\n\nGalaz García, Carmen. Assignment4 – EDS 220 - Working with Environmental Datasets. (n.d.). https://meds-eds-220.github.io/MEDS-eds-220-course/assignments/assignment4.html"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/final-project-thomas-fire.html#import-data-and-modules",
    "href": "posts/2024-12-02-thomas-fire/python-files/final-project-thomas-fire.html#import-data-and-modules",
    "title": "The Environmental Effects of the 2017 Thomas Fire",
    "section": "Import Data and Modules",
    "text": "Import Data and Modules\n\n\nImport Modules\nimport rioxarray as rioxr\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport os\n\n\n\n\nImport AQI data\naqi_17 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip\",\n                        compression=\"zip\")\naqi_18 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip\",\n                        compression=\"zip\")\n\n\n\n\nImport landsat data\nlandsat_fp = os.path.join(\"data\", \"landsat8-2018-01-26-sb-simplified.nc\")\nlandsat_df = rioxr.open_rasterio(landsat_fp)\n\nthomas_fp = os.path.join(\"data\", \"thomas_2017.geojson\")\nthomas_2017 = gpd.read_file(thomas_fp)"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/final-project-thomas-fire.html#visualizing-aqi-during-the-2017-thomas-fire-in-santa-barbara-county",
    "href": "posts/2024-12-02-thomas-fire/python-files/final-project-thomas-fire.html#visualizing-aqi-during-the-2017-thomas-fire-in-santa-barbara-county",
    "title": "The Environmental Effects of the 2017 Thomas Fire",
    "section": "Visualizing AQI during the 2017 Thomas Fire in Santa Barbara County",
    "text": "Visualizing AQI during the 2017 Thomas Fire in Santa Barbara County\n\nPreliminary Exploration\nWe would like to begin this section by excecuting preliminary explorations of our data.\n\n\nView first five rows of 2017 AQI\naqi_17_head\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n28\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n29\nGood\nPM2.5\n01-003-0010\n1\n\n\n2\nAlabama\nBaldwin\n1\n3\n2017-01-10\n25\nGood\nPM2.5\n01-003-0010\n1\n\n\n3\nAlabama\nBaldwin\n1\n3\n2017-01-13\n40\nGood\nPM2.5\n01-003-0010\n1\n\n\n4\nAlabama\nBaldwin\n1\n3\n2017-01-16\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\nView first five rows of 2017 AQI\naqi_18_head\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2018-01-02\n42\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2018-01-05\n45\nGood\nPM2.5\n01-003-0010\n1\n\n\n2\nAlabama\nBaldwin\n1\n3\n2018-01-08\n20\nGood\nPM2.5\n01-003-0010\n1\n\n\n3\nAlabama\nBaldwin\n1\n3\n2018-01-11\n25\nGood\nPM2.5\n01-003-0010\n1\n\n\n4\nAlabama\nBaldwin\n1\n3\n2018-01-14\n33\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n# Compare the differing shapes\nprint(aqi_17.shape, aqi_18.shape)\n# Print statement equating each dataframe columns and dtypes\nprint(aqi_17.dtypes == aqi_18.dtypes)\n\n(326801, 10) (327543, 10)\nState Name                   True\ncounty Name                  True\nState Code                   True\nCounty Code                  True\nDate                         True\nAQI                          True\nCategory                     True\nDefining Parameter           True\nDefining Site                True\nNumber of Sites Reporting    True\ndtype: bool\n\n\nWe started by examining the shape and data types of each dataframe to assess their compatibility for comparison. This step is crucial for ensuring the legitimacy of directly analyzing these two datasets together. Lucky for us, the dataframes share identical columns with matching data types. This consistency allows for seamless comparison and concatenation, aiding in our analysis.\n\n\nData Preprocessing\nTo aid in our comparisons, we begin by cleaning up our data.\n\n\nConcatenate the two dataframes together\naqi = pd.concat([aqi_17, aqi_18])\naqi\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n28\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n29\nGood\nPM2.5\n01-003-0010\n1\n\n\n2\nAlabama\nBaldwin\n1\n3\n2017-01-10\n25\nGood\nPM2.5\n01-003-0010\n1\n\n\n3\nAlabama\nBaldwin\n1\n3\n2017-01-13\n40\nGood\nPM2.5\n01-003-0010\n1\n\n\n4\nAlabama\nBaldwin\n1\n3\n2017-01-16\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n327538\nWyoming\nWeston\n56\n45\n2018-12-27\n36\nGood\nOzone\n56-045-0003\n1\n\n\n327539\nWyoming\nWeston\n56\n45\n2018-12-28\n35\nGood\nOzone\n56-045-0003\n1\n\n\n327540\nWyoming\nWeston\n56\n45\n2018-12-29\n35\nGood\nOzone\n56-045-0003\n1\n\n\n327541\nWyoming\nWeston\n56\n45\n2018-12-30\n31\nGood\nOzone\n56-045-0003\n1\n\n\n327542\nWyoming\nWeston\n56\n45\n2018-12-31\n35\nGood\nOzone\n56-045-0003\n1\n\n\n\n\n654344 rows × 10 columns\n\n\n\n\n\nClean Column Names\n# Initial column names: notice caps and spaces (difficult to work with!)\nprint(f\"Before Clean: {aqi.columns}\\n\")\n\n# Simplify column names\naqi.columns = (aqi.columns\n                .str.lower()\n                .str.replace(' ','_')\n                )\nprint(f\"After Clean: {aqi.columns}\\n\")\n\n\nBefore Clean: Index(['State Name', 'county Name', 'State Code', 'County Code', 'Date', 'AQI',\n       'Category', 'Defining Parameter', 'Defining Site',\n       'Number of Sites Reporting'],\n      dtype='object')\n\nAfter Clean: Index(['state_name', 'county_name', 'state_code', 'county_code', 'date', 'aqi',\n       'category', 'defining_parameter', 'defining_site',\n       'number_of_sites_reporting'],\n      dtype='object')\n\n\n\nConcatenating and cleaning our column names help us create a clean dataframe that will aid in filtering. We want to filter for Santa Barbara only and our necessary column names.\n\n\nFilter and Clean Data\n# Filter AQI to only Santa Barbara\naqi_sb = aqi[aqi[\"county_name\"] == \"Santa Barbara\"]\n# Drop unnecessary columns\naqi_sb = aqi_sb.drop(columns=['state_name', 'county_name', 'state_code', 'county_code'])\n\n# Find data type of date column\ndate_type = aqi_sb[\"date\"].dtype\n# Update the date column to be pd.datetime object\naqi_sb.date = pd.to_datetime(aqi_sb.date)\n# Update index to the date column\naqi_sb = aqi_sb.set_index(\"date\")\naqi_sb.sort_index(inplace=True)\n\n\nNow with our data cleaned, we can begin with our analysis. We want to calculate the AQI average over a 5 day rolling window.\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb[\"aqi\"].rolling(\"5D\").mean()\n# Add rolling mean to SB dataframe\naqi_sb[\"five_day_average\"] = rolling_average.values\n\nHooray! We have completed our data cleaning and now we have a easy to plot data frame full of rolling average values. All we have left is to…\n\n\nVisualize Our AQI 5-Day Rolling Average\n\n\nPlot AQI Rolling Average\n# Visualize the AQI data\naqi_sb.plot(kind=\"line\",\n            y=[\"aqi\", \"five_day_average\"],\n            xlabel=\"Date\",\n            ylabel=\"PM 2.5\",\n            label=[\"Daily AQI Level\", \"5-Day Average AQI\"],\n            title=\"Daily and Rolling Average AQI\\nof Santa Barbara County from 2017-18\")\n\n\n\n\n\n\n\n\n\nAs you can see, there is a large spike in PM 2.5 during the same time frame of the Thomas Fire in late 2017. Next, we will visualize the fire scars left by the fire using landsat data and false color imagery."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/python-files/final-project-thomas-fire.html#thomas-fire-false-color",
    "href": "posts/2024-12-02-thomas-fire/python-files/final-project-thomas-fire.html#thomas-fire-false-color",
    "title": "The Environmental Effects of the 2017 Thomas Fire",
    "section": "Thomas Fire False Color",
    "text": "Thomas Fire False Color\n\nStep 1: Explore the Data\nWe will examine the dataset to understand its structure. After exploring the data, we will summarize in paragraph form.\n\n# Show preliminary xarrary.Dataset\nlandsat_df\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\n\n# Show dimensions of dataset \nprint(landsat_df.dims)\n\nFrozenMappingWarningOnValuesAccess({'band': 1, 'x': 870, 'y': 731})\n\n\n\n# Show CRS of dataset \nprint(landsat_df.rio.crs)\n\nEPSG:32611\n\n\n\n# Show datatypes of dataset \nprint(landsat_df.dtypes)\n\nFrozen({'red': dtype('float64'), 'green': dtype('float64'), 'blue': dtype('float64'), 'nir08': dtype('float64'), 'swir22': dtype('float64')})\n\n\n\nData Summary\nThis dataset is a 2D dataset with a single band. There are five wavelength ranges captures, red, green, blue, near infrared and short wave infrared. The dataset is of CRS EPSG:32611.\n\n\n\nStep 2: Drop the Band Dimension\nTo ease visualizations, we will simplify the dataset by removing unnecessary dimensions.\n\n\nDrop band dimension of data\nlandsat_df = landsat_df.drop_vars(\"band\").squeeze()\n\n\n\n# View updated dataset\nlandsat_df.head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 1kB\nDimensions:      (x: 5, y: 5)\nCoordinates:\n  * x            (x) float64 40B 1.213e+05 1.216e+05 ... 1.221e+05 1.224e+05\n  * y            (y) float64 40B 3.952e+06 3.952e+06 ... 3.952e+06 3.951e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (y, x) float64 200B ...\n    green        (y, x) float64 200B ...\n    blue         (y, x) float64 200B ...\n    nir08        (y, x) float64 200B ...\n    swir22       (y, x) float64 200B ...xarray.DatasetDimensions:x: 5y: 5Coordinates: (3)x(x)float641.213e+05 1.216e+05 ... 1.224e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., 122115., 122385.])y(y)float643.952e+06 3.952e+06 ... 3.951e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., 3951585., 3951315.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]Indexes: (2)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0], dtype='float64', name='x'))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0], dtype='float64', name='y'))Attributes: (0)\n\n\n\n\nStep 3: Select RGB Bands\nBy extracting the red, green, and blue bands we can begin to create an RGB image.\n\n\nFilter and clean data\n# Filter AQI to only Santa Barbara\naqi_sb = aqi[aqi[\"county_name\"] == \"Santa Barbara\"]\n# Drop unnecessary columns\naqi_sb = aqi_sb.drop(columns=['state_name', 'county_name', 'state_code', 'county_code'])\n\n\nConverting the dataframe to an array will easily allow us to plot using the plot.imshow() method.\n\n# Convert to array\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (variable: 3, y: 731, x: 870)&gt; Size: 15MB\narray([[[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]])\nCoordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n  * variable     (variable) object 24B 'red' 'green' 'blue'xarray.DataArrayvariable: 3y: 731x: 8700.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0array([[[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]])Coordinates: (4)x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)variable(variable)object'red' 'green' 'blue'array(['red', 'green', 'blue'], dtype=object)Indexes: (3)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))variablePandasIndexPandasIndex(Index(['red', 'green', 'blue'], dtype='object', name='variable'))Attributes: (0)\n\n\n\n\nStep 4: Visualize\nNow we will plot the RGB data to visualize it as a true color image.\n\n# Visualize with simple plot\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [0.0..54930.71604938272].\n\n\n\n\n\n\n\n\n\n\nWhat happened?\nWell we did not alter the robust parameter. Let’s set it to True and see what happens!\n\n# Visualize with true color plot\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\n\n\nPlot Summary\nThe output of a) shows a black and white outline of the area we are working with, while b) shows us a more true to color rendering. The robust=True parameter that we added will eliminate any outliers that may alter the data. It uses 2nd and 98th percentiles of the data to compute the color limits.\n\n\nFalse color image\nTo visualize specific features like vegetation health or fire impacts, we can create false color imagery using the red, near infrared, and short wave infrared bands.\n\n# Visualize with false color plot\nlandsat_df[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\n\n\n\nStep 6: Map the False Color Image with Fire Perimeter\nLastly, we can overlay the false color imagery with critical geographical features like the fire perimeters we imported before.\n\n# Compare CRS\nprint(landsat_df.rio.crs)\nprint(thomas_2017.crs)\n\nEPSG:32611\nepsg:4326\n\n\n\n\nReproject AOI to RGB CRS\nthomas_2017 = thomas_2017.to_crs(landsat_df.rio.crs)\nprint('Matched CRS:',  landsat_df.rio.crs == thomas_2017.crs)\n\n\nMatched CRS: True\n\n\n\n\nVisualize Thomas Fire scar\n# Plot of false color raster with buffer overlay\nfig, ax = plt.subplots(figsize=(6, 7))  # Directly set size and aspect\nlandsat_df[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(\n                robust=True,\n                ax=ax)\nthomas_2017.boundary.plot(ax=ax, color=\"maroon\")\nax.axis(\"off\")\nax.legend([\"Thomas Fire Boundary\"])\nfig.suptitle(\"2017 Thomas Fire Scar\", color = 'black', fontsize = 14, fontweight='light', y=0.855)\nax.set_title(\"False colors with Short Wave Infrared, Near-Infrared, & Red Wavelengths\", fontsize=9)\nfig.text(x=.5,y=.2,\n        s='Data Source: CAL FIRE via Data.gov &  Microsof Planetary Computer data catalogue',\n        ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nfig.text(x=.5,y=.18,\n        s='Date Accessed: 11/19/24',\n        ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nFigure Description\nThis map uses false-color imagery to highlight vegetation and fire-affected areas within the Thomas Fire boundary from 2017. In this visualization, near-infrared (NIR) is represented as green, shortwave infrared (SWIR) as red, and red light as blue. Healthy vegetation strongly reflects NIR, making those areas appear green, while it absorbs red and SWIR wavelengths. Burned areas, often rich in iron oxides, reflect SWIR more strongly, appearing red in the image. This method helps distinguish fire scars and vegetation loss more effectively compared to true-color images, which use visible red, green, and blue wavelengths and may not clearly show such contrasts."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/final-project-thomas-fire.html",
    "href": "posts/2024-12-02-thomas-fire/final-project-thomas-fire.html",
    "title": "The Environmental Effects of the 2017 Thomas Fire",
    "section": "",
    "text": "This project can be found at https://github.com/imsibaja/eds222-final-project"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/final-project-thomas-fire.html#about",
    "href": "posts/2024-12-02-thomas-fire/final-project-thomas-fire.html#about",
    "title": "The Environmental Effects of the 2017 Thomas Fire",
    "section": "About:",
    "text": "About:\n\nPurpose:\nThis notebook explores the 2017 Thomas Fire, one of California’s largest wildfires, which burned over 280,000 acres across Ventura and Santa Barbara counties, causing extensive environmental damage, including vegetation loss, soil erosion, and increased flood risks. This notebook examines the fire’s impact on air quality using AQI data from the US Environmental Protection Agency and visualizes burn severity and fire scars using false-colored Landsat multispectral geospatial data.\n\n\nHighlights:\n\nImport and explore AQI and Landsat data to analyze the Thomas Fires\nCreate time series maps to explore the impact of the wildfires on AQI\nCreate true and false color images to highlight the fire’s bredth\nVisualize the false color fire scar alongside perimeter data for detailed analysis\n\n\n\nAbout the data:\n\nU.S. Air Quality Index (AQI)\nThe U.S. Air Quality Index (AQI), developed by the EPA, communicates outdoor air quality and associated health risks through six color-coded categories, ranging from “Good” (AQI ≤ 50) to “Hazardous” (AQI &gt; 300). AQI values up to 100 indicate satisfactory air quality, aligned with national health standards, while values above 100 signal unhealthy conditions—initially for sensitive groups and eventually for all as pollution levels rise. The color-coded system enables quick identification of air quality concerns in communities.\n\n\nLandset 8 Satellite Collection\nThis dataset consists of simplified bands (red, green, blue, near-infrared, and shortwave infrared) from Landsat Collection 2 Level-2 surface reflectance data, which was atmospherically corrected and captured by NASA’s Landsat 8 satellite. It was sourced from the Microsoft Planetary Computer data catalog and preprocessed to exclude non-land areas and reduce spatial resolution for ease of computation.\n\n\n\nObjectives:\n\nWrangle date and string data and combine data frames for analysis\nVisualize time series and create polished workflows\nManipulate raster and vector data using Rasterio and GeoPandass\n\nImplement Git for version control following best practices\nEnsure collaboration and reproducibility with structured workflows\n\n\n\nReferences:\nLandsat Data from Microsoft’s Planetary Computer Data Catalogue, AQI Data from the EPA’s daily AQI summaries\n\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 4-5 Thematic Mapper Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9IAXOVV\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 7 Enhanced Thematic Mapper Plus Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9C7I13B\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 8-9 Operational Land Imager / Thermal Infrared Sensor Level-2, Collection 2. U.S. Geological Survey. https://doi.org/10.5066/P9OGBGM6\n\nGalaz García, Carmen. Assignment4 – EDS 220 - Working with Environmental Datasets. (n.d.). https://meds-eds-220.github.io/MEDS-eds-220-course/assignments/assignment4.html"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/final-project-thomas-fire.html#import-data-and-modules",
    "href": "posts/2024-12-02-thomas-fire/final-project-thomas-fire.html#import-data-and-modules",
    "title": "The Environmental Effects of the 2017 Thomas Fire",
    "section": "Import Data and Modules",
    "text": "Import Data and Modules\n\n\nImport Modules\nimport rioxarray as rioxr\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport os\n\n\n\n\nImport AQI data\naqi_17 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip\",\n                        compression=\"zip\")\naqi_18 = pd.read_csv(\"https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip\",\n                        compression=\"zip\")\n\n\n\n\nImport landsat data\nlandsat_fp = os.path.join(\"data\", \"landsat8-2018-01-26-sb-simplified.nc\")\nlandsat_df = rioxr.open_rasterio(landsat_fp)\n\nthomas_fp = os.path.join(\"data\", \"thomas_2017.geojson\")\nthomas_2017 = gpd.read_file(thomas_fp)"
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/final-project-thomas-fire.html#visualizing-aqi-during-the-2017-thomas-fire-in-santa-barbara-county",
    "href": "posts/2024-12-02-thomas-fire/final-project-thomas-fire.html#visualizing-aqi-during-the-2017-thomas-fire-in-santa-barbara-county",
    "title": "The Environmental Effects of the 2017 Thomas Fire",
    "section": "Visualizing AQI during the 2017 Thomas Fire in Santa Barbara County",
    "text": "Visualizing AQI during the 2017 Thomas Fire in Santa Barbara County\n\nPreliminary Exploration\nWe would like to begin this section by excecuting preliminary explorations of our data.\n\n\nView first five rows of 2017 AQI\naqi_17_head\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n28\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n29\nGood\nPM2.5\n01-003-0010\n1\n\n\n2\nAlabama\nBaldwin\n1\n3\n2017-01-10\n25\nGood\nPM2.5\n01-003-0010\n1\n\n\n3\nAlabama\nBaldwin\n1\n3\n2017-01-13\n40\nGood\nPM2.5\n01-003-0010\n1\n\n\n4\nAlabama\nBaldwin\n1\n3\n2017-01-16\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\nView first five rows of 2017 AQI\naqi_18_head\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2018-01-02\n42\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2018-01-05\n45\nGood\nPM2.5\n01-003-0010\n1\n\n\n2\nAlabama\nBaldwin\n1\n3\n2018-01-08\n20\nGood\nPM2.5\n01-003-0010\n1\n\n\n3\nAlabama\nBaldwin\n1\n3\n2018-01-11\n25\nGood\nPM2.5\n01-003-0010\n1\n\n\n4\nAlabama\nBaldwin\n1\n3\n2018-01-14\n33\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n# Compare the differing shapes\nprint(aqi_17.shape, aqi_18.shape)\n# Print statement equating each dataframe columns and dtypes\nprint(aqi_17.dtypes == aqi_18.dtypes)\n\n(326801, 10) (327543, 10)\nState Name                   True\ncounty Name                  True\nState Code                   True\nCounty Code                  True\nDate                         True\nAQI                          True\nCategory                     True\nDefining Parameter           True\nDefining Site                True\nNumber of Sites Reporting    True\ndtype: bool\n\n\nWe started by examining the shape and data types of each dataframe to assess their compatibility for comparison. This step is crucial for ensuring the legitimacy of directly analyzing these two datasets together. Lucky for us, the dataframes share identical columns with matching data types. This consistency allows for seamless comparison and concatenation, aiding in our analysis.\n\n\nData Preprocessing\nTo aid in our comparisons, we begin by cleaning up our data.\n\n\nConcatenate the two dataframes together\naqi = pd.concat([aqi_17, aqi_18])\naqi\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n28\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n29\nGood\nPM2.5\n01-003-0010\n1\n\n\n2\nAlabama\nBaldwin\n1\n3\n2017-01-10\n25\nGood\nPM2.5\n01-003-0010\n1\n\n\n3\nAlabama\nBaldwin\n1\n3\n2017-01-13\n40\nGood\nPM2.5\n01-003-0010\n1\n\n\n4\nAlabama\nBaldwin\n1\n3\n2017-01-16\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n327538\nWyoming\nWeston\n56\n45\n2018-12-27\n36\nGood\nOzone\n56-045-0003\n1\n\n\n327539\nWyoming\nWeston\n56\n45\n2018-12-28\n35\nGood\nOzone\n56-045-0003\n1\n\n\n327540\nWyoming\nWeston\n56\n45\n2018-12-29\n35\nGood\nOzone\n56-045-0003\n1\n\n\n327541\nWyoming\nWeston\n56\n45\n2018-12-30\n31\nGood\nOzone\n56-045-0003\n1\n\n\n327542\nWyoming\nWeston\n56\n45\n2018-12-31\n35\nGood\nOzone\n56-045-0003\n1\n\n\n\n\n654344 rows × 10 columns\n\n\n\n\n\nClean Column Names\n# Initial column names: notice caps and spaces (difficult to work with!)\nprint(f\"Before Clean: {aqi.columns}\\n\")\n\n# Simplify column names\naqi.columns = (aqi.columns\n                .str.lower()\n                .str.replace(' ','_')\n                )\nprint(f\"After Clean: {aqi.columns}\\n\")\n\n\nBefore Clean: Index(['State Name', 'county Name', 'State Code', 'County Code', 'Date', 'AQI',\n       'Category', 'Defining Parameter', 'Defining Site',\n       'Number of Sites Reporting'],\n      dtype='object')\n\nAfter Clean: Index(['state_name', 'county_name', 'state_code', 'county_code', 'date', 'aqi',\n       'category', 'defining_parameter', 'defining_site',\n       'number_of_sites_reporting'],\n      dtype='object')\n\n\n\nConcatenating and cleaning our column names help us create a clean dataframe that will aid in filtering. We want to filter for Santa Barbara only and our necessary column names.\n\n\nFilter and Clean Data\n# Filter AQI to only Santa Barbara\naqi_sb = aqi[aqi[\"county_name\"] == \"Santa Barbara\"]\n# Drop unnecessary columns\naqi_sb = aqi_sb.drop(columns=['state_name', 'county_name', 'state_code', 'county_code'])\n\n# Find data type of date column\ndate_type = aqi_sb[\"date\"].dtype\n# Update the date column to be pd.datetime object\naqi_sb.date = pd.to_datetime(aqi_sb.date)\n# Update index to the date column\naqi_sb = aqi_sb.set_index(\"date\")\naqi_sb.sort_index(inplace=True)\n\n\nNow with our data cleaned, we can begin with our analysis. We want to calculate the AQI average over a 5 day rolling window.\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb[\"aqi\"].rolling(\"5D\").mean()\n# Add rolling mean to SB dataframe\naqi_sb[\"five_day_average\"] = rolling_average.values\n\nHooray! We have completed our data cleaning and now we have a easy to plot data frame full of rolling average values. All we have left is to…\n\n\nVisualize Our AQI 5-Day Rolling Average\n\n\nPlot AQI Rolling Average\n# Visualize the AQI data\naqi_sb.plot(kind=\"line\",\n            y=[\"aqi\", \"five_day_average\"],\n            xlabel=\"Date\",\n            ylabel=\"PM 2.5\",\n            label=[\"Daily AQI Level\", \"5-Day Average AQI\"],\n            title=\"Daily and Rolling Average AQI\\nof Santa Barbara County from 2017-18\")\n\n\n\n\n\n\n\n\n\nAs you can see, there is a large spike in PM 2.5 during the same time frame of the Thomas Fire in late 2017. Next, we will visualize the fire scars left by the fire using landsat data and false color imagery."
  },
  {
    "objectID": "posts/2024-12-02-thomas-fire/final-project-thomas-fire.html#thomas-fire-false-color",
    "href": "posts/2024-12-02-thomas-fire/final-project-thomas-fire.html#thomas-fire-false-color",
    "title": "The Environmental Effects of the 2017 Thomas Fire",
    "section": "Thomas Fire False Color",
    "text": "Thomas Fire False Color\n\nStep 1: Explore the Data\nWe will examine the dataset to understand its structure. After exploring the data, we will summarize in paragraph form.\n\n# Show preliminary xarrary.Dataset\nlandsat_df\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\n\n# Show dimensions of dataset \nprint(landsat_df.dims)\n\nFrozenMappingWarningOnValuesAccess({'band': 1, 'x': 870, 'y': 731})\n\n\n\n# Show CRS of dataset \nprint(landsat_df.rio.crs)\n\nEPSG:32611\n\n\n\n# Show datatypes of dataset \nprint(landsat_df.dtypes)\n\nFrozen({'red': dtype('float64'), 'green': dtype('float64'), 'blue': dtype('float64'), 'nir08': dtype('float64'), 'swir22': dtype('float64')})\n\n\n\nData Summary\nThis dataset is a 2D dataset with a single band. There are five wavelength ranges captures, red, green, blue, near infrared and short wave infrared. The dataset is of CRS EPSG:32611.\n\n\n\nStep 2: Drop the Band Dimension\nTo ease visualizations, we will simplify the dataset by removing unnecessary dimensions.\n\n\nDrop band dimension of data\nlandsat_df = landsat_df.drop_vars(\"band\").squeeze()\n\n\n\n# View updated dataset\nlandsat_df.head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 1kB\nDimensions:      (x: 5, y: 5)\nCoordinates:\n  * x            (x) float64 40B 1.213e+05 1.216e+05 ... 1.221e+05 1.224e+05\n  * y            (y) float64 40B 3.952e+06 3.952e+06 ... 3.952e+06 3.951e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (y, x) float64 200B ...\n    green        (y, x) float64 200B ...\n    blue         (y, x) float64 200B ...\n    nir08        (y, x) float64 200B ...\n    swir22       (y, x) float64 200B ...xarray.DatasetDimensions:x: 5y: 5Coordinates: (3)x(x)float641.213e+05 1.216e+05 ... 1.224e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., 122115., 122385.])y(y)float643.952e+06 3.952e+06 ... 3.951e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., 3951585., 3951315.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[25 values with dtype=float64]Indexes: (2)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0], dtype='float64', name='x'))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0], dtype='float64', name='y'))Attributes: (0)\n\n\n\n\nStep 3: Select RGB Bands\nBy extracting the red, green, and blue bands we can begin to create an RGB image.\n\n\nFilter and clean data\n# Filter AQI to only Santa Barbara\naqi_sb = aqi[aqi[\"county_name\"] == \"Santa Barbara\"]\n# Drop unnecessary columns\naqi_sb = aqi_sb.drop(columns=['state_name', 'county_name', 'state_code', 'county_code'])\n\n\nConverting the dataframe to an array will easily allow us to plot using the plot.imshow() method.\n\n# Convert to array\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (variable: 3, y: 731, x: 870)&gt; Size: 15MB\narray([[[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]])\nCoordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\n  * variable     (variable) object 24B 'red' 'green' 'blue'xarray.DataArrayvariable: 3y: 731x: 8700.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0array([[[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]],\n\n       [[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]])Coordinates: (4)x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)variable(variable)object'red' 'green' 'blue'array(['red', 'green', 'blue'], dtype=object)Indexes: (3)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))variablePandasIndexPandasIndex(Index(['red', 'green', 'blue'], dtype='object', name='variable'))Attributes: (0)\n\n\n\n\nStep 4: Visualize\nNow we will plot the RGB data to visualize it as a true color image.\n\n# Visualize with simple plot\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [0.0..54930.71604938272].\n\n\n\n\n\n\n\n\n\n\nWhat happened?\nWell we did not alter the robust parameter. Let’s set it to True and see what happens!\n\n# Visualize with true color plot\nlandsat_df[[\"red\", \"green\", \"blue\"]].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\n\n\nPlot Summary\nThe output of a) shows a black and white outline of the area we are working with, while b) shows us a more true to color rendering. The robust=True parameter that we added will eliminate any outliers that may alter the data. It uses 2nd and 98th percentiles of the data to compute the color limits.\n\n\nFalse color image\nTo visualize specific features like vegetation health or fire impacts, we can create false color imagery using the red, near infrared, and short wave infrared bands.\n\n# Visualize with false color plot\nlandsat_df[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\n\n\n\nStep 6: Map the False Color Image with Fire Perimeter\nLastly, we can overlay the false color imagery with critical geographical features like the fire perimeters we imported before.\n\n# Compare CRS\nprint(landsat_df.rio.crs)\nprint(thomas_2017.crs)\n\nEPSG:32611\nepsg:4326\n\n\n\n\nReproject AOI to RGB CRS\nthomas_2017 = thomas_2017.to_crs(landsat_df.rio.crs)\nprint('Matched CRS:',  landsat_df.rio.crs == thomas_2017.crs)\n\n\nMatched CRS: True\n\n\n\n\nVisualize Thomas Fire scar\n# Plot of false color raster with buffer overlay\nfig, ax = plt.subplots(figsize=(6, 7))  # Directly set size and aspect\nlandsat_df[[\"swir22\", \"nir08\", \"red\"]].to_array().plot.imshow(\n                robust=True,\n                ax=ax)\nthomas_2017.boundary.plot(ax=ax, color=\"maroon\")\nax.axis(\"off\")\nax.legend([\"Thomas Fire Boundary\"])\nfig.suptitle(\"2017 Thomas Fire Scar\", color = 'black', fontsize = 14, fontweight='light', y=0.855)\nax.set_title(\"False colors with Short Wave Infrared, Near-Infrared, & Red Wavelengths\", fontsize=9)\nfig.text(x=.5,y=.2,\n        s='Data Source: CAL FIRE via Data.gov &  Microsof Planetary Computer data catalogue',\n        ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nfig.text(x=.5,y=.18,\n        s='Date Accessed: 11/19/24',\n        ha='center', va='center', fontsize=8, color='black', fontstyle='italic')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nFigure Description\nThis map uses false-color imagery to highlight vegetation and fire-affected areas within the Thomas Fire boundary from 2017. In this visualization, near-infrared (NIR) is represented as green, shortwave infrared (SWIR) as red, and red light as blue. Healthy vegetation strongly reflects NIR, making those areas appear green, while it absorbs red and SWIR wavelengths. Burned areas, often rich in iron oxides, reflect SWIR more strongly, appearing red in the image. This method helps distinguish fire scars and vegetation loss more effectively compared to true-color images, which use visible red, green, and blue wavelengths and may not clearly show such contrasts."
  }
]